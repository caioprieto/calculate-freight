c
(total_aulas_vistas / total_aulas) * 100
(total_aulas_vistas / total_aulas) * 100)
total_aulas
total_aulas_vistas
((total_aulas_vistas / total_aulas) * 100).to_i
c
((total_aulas_vistas / total_aulas) * 100).to_i
(total_aulas_vistas / total_aulas) * 100).to_i
((total_aulas_vistas / total_aulas) * 100).to_i
]
((total_aulas_vistas / total_aulas) * 100).to_i
((total_aulas_vistas / total_aulas) * 100).to_i)
c
user.user_aulas.where(curso_id: curso.id, watched: true).count
user.user_aulas.where(curso_id: curso.id, watched: true)
c
user.user_aulas.where(curso_id: curso.id, watched: true)
user.user_aulas.where(curso_id: curso.id, watched: true).count
user.user_aulas.where(curso_id: curso.id, watched: true)
c
user.user_aulas
user.user_aulas.where(watched: true)
user.user_aulas.where(curso_id: curso.id, watched: true)
c
user.user_aulas.where(curso_id: curso.id, watched: true)
user.user_aulas.where(curso_id: curso.id, watched: true).count
user.user_aulas.where(curso_id: curso.id, watched: true)
c
user_aulas.lastc
user_aulas.last
user_aulas
self.user_aulas.where(watched: true)
self.user_aulas.where(watched: true).pluck(:progress)
self.user_aulas.where(watched: true).pluck(:progresso)
self.user_aulas.where(watched: true).pluck(:progress)
self.user_aulas.where(watched: true)
self.user_aulas.where(watched: true).count
self.user_aulas.where(watched: true)
self.user_aulas
self.watched_aulas
self.watched_aulas.pluck(:progress)
self.watched_aulas.pluck(:progresso)
self.watched_aulas.count
self.watched_aulas
self.cursos
self
c
Word.where(id: @curso.aulas.where.not(word_id: nil).pluck(:word_id)).count
Word.where(id: @curso.aulas.where.not(word_id: nil).pluck(:word_id))
c
@curso.update!(curso_params)
n
params[:curso]
c
@user.pedidos
@user.pedidos.count
@user.pedidos
@user
c
user.progress(curso)
c
user.progress(curso)
c
user_curso.recalculate_progress
user_curso = user_aula.user.user_cursos.where(curso_id: curso_id).first
curso_id = user_aula.aula.modulo.curso_id
c
flash[:alert] = "Este curso j√° foi comprado!"
n
c
cart.save
c
cart
cart.positive?
cart.success?
@cart.cart_cursos.create(curso_id: params[:curso_id])
c
cart.user.cursos.where(id: curso_id).present?
cart.user.cursos.where(id: curso_id)
cart.user.cursos
cart.user.cursos.include(curso)
curso
cart.user.cursos
cart.user
self
c
pluck(:id)
cart_cursos.pluck(:id)
cart.cursos.pluck(:id)
cursos.pluck(:id)
cart.user.cursos.pluck(:id)
c
user
current_user
c
params[:code]
c
n
Cart.find(cart_id).cursos
c
cart
cart.cursos
n
c
pedido.finalizar
n
pedido.liberar_curso
c
n
c
UserCurso.last
n
curso
cart.cursos
n
UserCurso.last
UserCurso
pedido.liberar_curso
c
UserCurso
cart.cursos.ids
cart.cursos.pluck(:id)
cart.cursos.collect(&:id)
cart.cursos.collect(&:curso_id)
cart.collect(&:cursos_id)
cart.map(&:cursos_id)
cart.map(:&cursos_id)
cart.map(&:cursos_id)
cart.cursos
cart
cursos
self
c
@cart.cart_cursos.where(curso_id: curso_id).last.destroy
@cart.cart_cursos.where(curso_id: curso_id).destroy
@cart.cart_cursos.where(curso_id: curso_id).destroy!
@cart.cart_cursos.where(curso_id: curso_id).destroy
@cart.cart_cursos.where(curso_id: curso_id)
@cart.joins(:cart_cursos).where(curso_id: curso_id)
@cart.joins(:cart_cursos).where(curso_id: curso_id } )
@cart.joins(:cart_cursos).where*curso_id: curso_id } )
@cart.joins(:cart_cursos).where(cursos: { curso_id: curso_id } )
@cart.joins(:cursos).where(cursos: { curso_id: curso_id } )
@cart.left_joins(:cursos).where(cursos: { curso_id: curso_id } )
@cart.joins(:cursos).where(cursos: { curso_id: curso_id } )
@cart.cursos.find_by(curso_id: curso_id)
@cart.cursos
@cart.delete(curso_id)
@cart
curso_id = params[:curso_id]
cart_id = params[:cart_id]
c
ApplicationControllerc
c
@cart
c
user_aulas.order(:updated_at).last.aula.modulo.curso
c
user_aulas.last
user_aulas
seen_aulas.last
seen_aulas
seen_aulas.where(id: total_aulas.map(&:id)).count
seen_aulas.where(id: total_aulas.map(&:id))
total_aulas.map(&:id)
seen_aulas.where(id: total_aulas.map(&:id))
n
c
((aulas_vistas.count.to_f / total_aulas.count) * 100).round(2)
n
seen_aulas.pluck(:id)
seen_aulas
total_aulas.map(&:id)
n
curso.modulos.includes(:aulas).map(&:aulas)
curso.modulos.includes(:aulas).map(&:aulas).map(&:id)
curso.modulos.includes(:aulas).map(&:aulas).map(%:id)
curso.modulos.includes(:aulas).map(&:aulas)
curso.modulos.includes(:aulas).flat_map(&:aulas)
c
curso.modulos.map(&:aulas)
curso.modulos.map(&:aulas).count
curso.modulos.map(&:aulas)
curso.modulos
curso
cruso
c
seen_aulas.last
seen_aulas.pluck(:curso_id)
seen_aulas
curso.id
curso
continue
c
params
c
@curso.curso_words.where(word_id: params[:word_id]).destroy_all
params[:word_id]
@curso.curso_words.where(word_id: params[:word_id])
n
Curso.find(params[:curso_id])
c
@curso.words
@curso
c
curso
@curso
c
word_id
id
c
words.create(word_id: word_id)
word_id
c
words.create(word_id: word_id)
words.create(word_id: word_id.to_i)
word_id.to_i
word_id
words.create(word_id: word_id)
c
self
c
Curso.find(params[:id])
c
curso_ids
c
params
c
params
c
Curso.find(params[:id]).modulos.last.aulas.last.video
Curso.find(params[:id]).modulos.last.aulas.last
Curso.find(params[:id]).modulos.last.aulas
Curso.find(params[:id]).modulos.last
Curso.find(params[:id]).modulos.last.aulas
Curso.find(params[:id]).modulos.last
Curso.find(params[:id]).modulos
Curso.find(params[:id]).aulas
Curso.find(params[:id])
c
params
c
params
c
resource
self
c
current_user
c
current_user
c
current_user.admin?
current_user
c
access_token
