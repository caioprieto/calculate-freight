c
Curso.find(params[:id]).modulos.last.aulas.last.video
Curso.find(params[:id]).modulos.last.aulas.last
Curso.find(params[:id]).modulos.last.aulas
Curso.find(params[:id]).modulos.last
Curso.find(params[:id]).modulos.last.aulas
Curso.find(params[:id]).modulos.last
Curso.find(params[:id]).modulos
Curso.find(params[:id]).aulas
Curso.find(params[:id])
c
params
c
params
c
resource
self
c
current_user
c
current_user
c
current_user.admin?
current_user
c
access_token
c
access_token
c
access_token
acess_token
c
access_token
c
request.env["omniauth.auth"]
c
request.env["omniauth.auth"]
c
User.from_omniauth(request.env["omniauth.auth"])
c
self
c
!require "awesome_print"
require! "awesome_print"
require "awesome_print"
c
response.body
response.doby
response
c
response
n
c
response
c
response.body
n
response
c
n
response.body
response
c
    response = client.class.post(
      url,
      body: {
        model: "gpt-4-turbo",
        messages: [ { role: "system", content: "Extraia e formate os dados relevantes deste texto: #{text}" } ]
      }.to_json,
      headers: {
        "Authorization" => "Bearer #{API_KEY}",
        "Content-Type" => "application/json"
      }
    )
n
c
response
n
text
c
@response
c
response
c
client
text
c
response
n
OpenAI::Client.new(access_token: API_KEY)
n
c
n
OpenAI::Client
c
response
response.body
response
c
response
c
extraindo_texto_pdf
c
response
c
extraindo_texto_pdf
c
texto_extraido
c
RTesseract.new(@file.path, lang: "por").to_s
c
extraindo_texto_pdf
c
n
c
params
c
n
params[:file_pdf].present?
c
n
c
params[:file_pdf].present?
params[:file_pdf]
file
params[:file_pdf]
params
c
response
n
form_data
n
request
n
c
service_response
c
service_response
c
service_response
c
response
c
response
c
service.upload_pdf(file_pdf)
service
n
params[:file_pdf].tempfile.path
c
n
params[:file_pdf].tempfile.path
c
http.request(request)
n
{ file: File.open(file_path) }
n
Net::HTTP::Post.new(uri.path, @headers)
n
Net::HTTP.new(uri.host, uri.port)
n
URI.parse(API_URL)
n
build_request(file_path)
n
service.upload_pdf(file_pdf)
n
params[:file_pdf].tempfile.path
c
URI.parse(API_URL)
URI.parse("API_URL")
n
build_request(file_path)
n
service.upload_pdf(file_pdf)
n
params[:file_pdf].tempfile.path
c
service.upload_pdf(file_pdf)
service
n
ImportServiceFreight.new(file_pdf)
n
params[:file_pdf].tempfile.path
c
ImportFreightService.new(file, options)
n
params[:file_pdf]
c
params[:file_pdf].tempfile.path
params[:file_pdf].temp_file.path
params[:file_pdf].temp_file
c
params[:file_pdf]
c
params[:file_pdf]
c
@address[:street]
@address["street"]
@address
c
search_cep_service.call
c
search_cep_service.call
c
search_cep_service
c
@frete_calculado["company"]["name"]
@frete_calculado
@frete_calculado["name"]
c
@frete_calculado
c
@frete_calculado
c
params[:service_types].reject(&:empty?).map(&:to_i).to_s
params[:service_types].reject(&:empty?).map(&:to_i)
params[:service_types].to_s
params[:service_types]
c
params[:service_types]
c
@frete_calculado
c
@frete_calculado
c
result
c
@frete_calculado
result
c
http.request(request)
n
request.body
body.to_json
header
request
n
c
result
c
header
request
request.body
n
c
header
request
n
http
n
uri
n
c
result
c
